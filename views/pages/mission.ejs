<!DOCTYPE html>
<html>
<head>
  <% include ../partials/header.ejs %>
</head>
<script src="/socket.io/socket.io.js"></script>
<script>
  var socket = io();
  var user = <%-JSON.stringify(user)%>;
  var mission = <%-JSON.stringify(mission)%>;

  socket.on('connect', function(){
    var pack = {
      'user': user,
      'mission': mission
    };

    $("#yourItems").html("<h2> Your Items: </h2>");
    for(var i=0; i< user.items.length; i++){
      $("#yourItems").append('<hr><button type="button" onclick="changeItem(\'' + user.items[i] + '\', true)">' + user.items[i] + '</button>');
    }
    $("#yourItems").append("<hr>");

    $("#groupItems").html("<h2> Mission Items To Submit: </h2>");
    for(var i=0; i< mission.items.length; i++){
      $("#groupItems").append('<hr><button type="button" onclick="changeItem(\'' + mission.items[i] + '\', false)">' + mission.items[i] + '</button>');
    }
    $("#groupItems").append("<hr>");

    socket.emit('user info', pack);
  });

  socket.on('update users', function(missionU){
    if(missionU.name === mission.name){
      mission.users = missionU.users; //sets local mission users variable
      $("#activeUsers").html("<h2> Active users on this Mission: </h2>");
      for(var i=0; i< mission.users.length; i++){
        $("#activeUsers").append("<hr><h3>"+mission.users[i]+"</h3>");
      }
      $("#activeUsers").append("<hr>");
    }
  });

  socket.on('update items', function(pack){
    mission.items = pack.mission.items;
    if(user.user === pack.user.user) //if the update came from the user, update him
      user.items = pack.user.items;

    $("#yourItems").html("<h2> Your Items: </h2>");
    for(var i=0; i< user.items.length; i++){
      $("#yourItems").append('<hr><button type="button" onclick="changeItem(\'' + user.items[i] + '\', true)">' + user.items[i] + '</button>');
    }
    $("#yourItems").append("<hr>");

    $("#groupItems").html("<h2> Items to Trade: </h2>");
    for(var i=0; i< mission.items.length; i++){
      $("#groupItems").append('<hr><button type="button" onclick="changeItem(\'' + mission.items[i] + '\', false)">' + mission.items[i] + '</button>');
    }
    $("#groupItems").append("<hr>");

  });

  function changeItem(item, add){
    var pack = {
      'user': user,
      'mission': mission,
      'item': item,
      'add': add
    };
    socket.emit('change item', pack);
  }

$(document).ready(function(){
  //Canvas stuff
  var canvas = $("#canvas")[0];
  var ctx = canvas.getContext("2d");
  var w = $("#canvas").width();
  var h = $("#canvas").height();
  
  //Lets save the cell width in a variable for easy control
  var cw = 50;
  var d; //keyboard input movement variable
  var food;
  var score;

  var game_board = new Object();

  var players = [];
  
  //Lets create the snake now
  var snake_array; //an array of cells to make up the snake
  
  function init()
  {
    create_players();
    create_board(); //Now we can see the food particle
    //finally lets display the score
    score = 0;
    
    //Lets move the snake now using a timer which will trigger the paint function
    //every 60ms
    if(typeof game_loop != "undefined") clearInterval(game_loop);
    game_loop = setInterval(paint, 60);

  }
  init();
  
  function create_players()
  {
    for(var i = 0; i < mission.users.length; i++)
    {
      var player = new Object();
      player.name = mission.users[i];
      players.push(player)
    }
  }
  
  //Lets create the board now
  function create_board()
  {
    game_board.grid = mission.board;
    game_board.board = new Array(game_board.grid.length);
    console.log(game_board.board.length);
    for(var i = 0; i < game_board.grid.length; i++)
    {
      game_board.board[i] = new Array(game_board.grid.length);
    }
    for(var i = 0; i < game_board.grid.length; i++)
    {
      var currentCol = game_board.grid[i];
      for(var j = 0; j < currentCol.length; j++)
      {
        console.log("(i,j): (" + i + "," + j + ")");
        var cell = new Object();
        cell.type = currentCol[j];
        switch(currentCol[j]) {
          case ' ':
            cell.color = "LightGrey";
            break;
          case 'O':
            cell.color = "black";
            cell.destructable = false;
            break;
          case 'o':
            cell.color = "#404040";
            cell.destructable = true;
            break;
          case 'R':
            cell.color = "red"
            break;
          case 'K':
            cell.color = "yellow"
            break;
          case '1':
            players[0].pos = [j,i];
            cell.type = ' ';
            cell.color = "LightGrey"
            break;
          case '2':
            //code
            break;
          case 'T':
            cell.color = "orange"
            //code
            break;
          case 'G':
            cell.color = "green"
            //code
            break;
          case '*':
            cell.color = "purple"
            //code
            break;
          default:
            console.log("you suck");
        }
        game_board.board[j][i] = cell;
      }
    }
  }
  
  //Lets paint the snake now
  function paint()
  {
    //To avoid the snake trail we need to paint the BG on every frame
    //Lets paint the canvas now
    // ctx.fillStyle = "white";
    // ctx.fillRect(0, 0, w, h);

    //These were the position of the head cell.
    //We will increment it to get the new head position
    //Lets add proper direction based movement now
    if(d == "right" && players[0].pos[0] + 1 < game_board.grid.length){
      var val = game_board.grid[players[0].pos[1]][players[0].pos[0] + 1];
      if(val.toUpperCase() != 'O')
        players[0].pos[0]++;
    }
    else if(d == "left" && players[0].pos[0] - 1 >= 0) {
      var val = game_board.grid[players[0].pos[1]][players[0].pos[0] - 1];
      if(val.toUpperCase() != 'O')
        players[0].pos[0]--;
    }
    else if(d == "up" && players[0].pos[1] - 1 >= 0) {
      var val = game_board.grid[players[0].pos[1] - 1][players[0].pos[0]];
      if(val.toUpperCase() != 'O')
        players[0].pos[1]--;
    }
    else if(d == "down" && players[0].pos[1] + 1 < game_board.grid[0].length) {
      var val = game_board.grid[players[0].pos[1] + 1][players[0].pos[0]];
      if(val.toUpperCase() != 'O')
        players[0].pos[1]++;
    }
   
    for(var i = 0; i < game_board.board.length; i++)
    {
      var currentRow = game_board.board[i];
      for(var j = 0; j < currentRow.length; j++)
      {

        //Lets paint 10px wide cells
        for(var k = 0; k < players.length; k++){
          if(Math.abs(players[k].pos[0] - i) <= 2 && Math.abs(players[k].pos[1] - j) <= 2){
              paint_cell(i,j, game_board.board[i][j].color);
              
            break;

          }
          else
            paint_cell(i,j,"white");
        }
      }
    }

    for(var i = 0; i < players.length; i++)
    {
      //Lets paint 10px wide cells
      paint_cell(players[i].pos[0], players[i].pos[1], "blue");
    }

    d = null;

  }
  
  //Lets first create a generic function to paint cells
  function paint_cell(x, y, color)
  {
    ctx.fillStyle = color;
    ctx.fillRect(x*cw, y*cw, cw, cw);
    ctx.strokeStyle = "white";
    ctx.strokeRect(x*cw, y*cw, cw, cw);
    ctx.strokeStyle = "black";
    ctx.strokeRect(0, 0, w, h);
  }
    
  //Lets add the keyboard controls now
  $(document).keydown(function(e){
    e.preventDefault();
    var key = e.which;
    //We will add another clause to prevent reverse gear
    if(key == "37") d = "left";
    else if(key == "38") d = "up";
    else if(key == "39") d = "right";
    else if(key == "40") d = "down";
    //The snake is now keyboard controllable
  })
    

})
</script>

<body>

  <% include ../partials/nav.ejs %>

<div class="jumbotron text-center">
  <div class="container">
    <h1><%=mission.name%></h1>
  </div>
</div>
<canvas id="canvas" width="500" height="500"></canvas>
<div id="activeUsers" class="container">
</div>
<div id="yourItems" class="container">
</div>
<div id="groupItems" class="container">
</div>

</body>
</html>
